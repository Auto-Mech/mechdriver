./estoktpdriver/driver.py:20:ANG2BOHR = qcc.conversion_factor('angstrom', 'bohr')
./estoktpdriver/driver.py:21:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./estoktpdriver/driver.py:22:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/tau.py:11:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/sp.py:9:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/sp.py:10:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/ts.py:11:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/ts.py:12:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/tmp.py:13:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/tmp.py:14:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/geom.py:13:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/geom.py:14:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/scan.py:10:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/scan.py:11:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/conformer.py:12:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/conformer.py:13:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/driver.py:9:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/driver.py:10:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./moldr/pf.py:14:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./moldr/pf.py:15:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./thermodriver/driver.py:323:    spec['hind_inc'] = hind_inc * qcc.conversion_factor('degree', 'radian')
./esdriver/load/_species.py:236:        hind_tau =  hind_tau * qcc.conversion_factor('degree', 'radian')
./esdriver/load/_species.py:239:        hind_tau = 360. * qcc.conversion_factor('degree', 'radian')
./esdriver/driver.py:322:    # ts_spec['hind_inc'] = hind_inc * qcc.conversion_factor('degree', 'radian')
./scripts/ktp.py:16:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./scripts/ktp.py:17:ANG2BOHR = qcc.conversion_factor('angstrom', 'bohr')
./scripts/ktp.py:18:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./scripts/ktp.py:19:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./scripts/es.py:13:ANG2BOHR = qcc.conversion_factor('angstrom', 'bohr')
./scripts/es.py:14:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./scripts/es.py:15:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./scripts/es.py:141:            params['scan_increment'] = 30. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:171:            params['scan_increment'] = 30. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:539:            new_zma, {dist_name: 2.2, aabs1: 180. * qcc.conversion_factor('degree', 'radian')})
./scripts/es.py:845:                    babs1 = 180. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:847:                        babs1 = 90. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:865:                    babs1 = 180. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:867:                        babs1 = 90. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:1172:                babs1 = 180. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:1174:                    babs1 = 90. * qcc.conversion_factor('degree', 'radian')
./scripts/es.py:1292:            dist_cutoff = 3.*qcc.conversion_factor('angstrom', 'bohr')
./scripts/thermo.py:4:from qcelemental import constants as qcc
./scripts/thermo.py:11:ANG2BOHR = qcc.conversion_factor('angstrom', 'bohr')
./scripts/thermo.py:12:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./scripts/thermo.py:13:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
./dlibs/phycon.py:5:from qcelemental import constants as qcc
./dlibs/phycon.py:7:WAVEN2KCAL = qcc.conversion_factor('wavenumber', 'kcal/mol')
./dlibs/phycon.py:8:EH2KCAL = qcc.conversion_factor('hartree', 'kcal/mol')
